// vector<vector<int>> threeSum(vector<int> &nums) {
// vector<vector<int>> ans;
// const int target = 0;
//
// // Make nums in increasing order. Time: O(nlogn)
// sort(nums.begin(), nums.end());
//
// for (int i = 0; i < static_cast<int>(nums.size()) - 2; ++i) {
// if (i == 0 || nums[i] != nums[i - 1]) {  // Skip duplicated.
// for (int j = i + 1, k = nums.size() - 1; j < k; ) {  // Time: O(n) for each i.
// if (j - 1 > i  && nums[j] == nums[j - 1]) {  // Skip duplicated.
// ++j;
// } else if (k + 1 < nums.size() && nums[k] == nums[k + 1]) {  // Skip duplicated.
// --k;
// } else {
// const auto sum = nums[i] + nums[j] + nums[k];
// if (sum > target) {  // Should decrease sum.
// --k;
// } else if (sum < target) {  // Should increase sum.
// ++j;
// } else {
// ans.push_back({nums[i], nums[j], nums[k]});
// ++j, --k;
// }
// }
// }
// }
// }
//
// return ans;
// }
// };

--------------------------------------------------------------------------------------------------


// class Solution {
// public int findShortestSubArray(int[] nums) {
// Map<Integer, Integer> left = new HashMap(),
// right = new HashMap(), count = new HashMap();
//
// for (int i = 0; i < nums.length; i++) {
// int x = nums[i];
// if (left.get(x) == null) left.put(x, i);
// right.put(x, i);
// count.put(x, count.getOrDefault(x, 0) + 1);
// }
//
// int ans = nums.length;
// int degree = Collections.max(count.values());
// for (int x: count.keySet()) {
// if (count.get(x) == degree) {
// ans = Math.min(ans, right.get(x) - left.get(x) + 1);
// }
// }
// return ans;
// }
// }
